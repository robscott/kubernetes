/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package k8s.io.api.discovery.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// Endpoint represents a set of backends implementing a service
message Endpoint {
  // Required: Targets of the endpoint. Must contain at least one target.
  // Different consumers (e.g. kube-proxy) handle different types of
  // targets in the context of its own capabilities.
  // +listType=set
  repeated string targets = 1;

  // Required: the conditions of the endpoint.
  optional EndpointConditions conditions = 2;

  // The stated hostname of this endpoint. This field may be used by consumers
  // of endpoint to distinguish endpoints from each other (e.g. in DNS names).
  // Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS).
  // +optional
  optional string hostname = 3;

  // Reference to object providing the endpoint.
  // +optional
  optional k8s.io.api.core.v1.ObjectReference targetRef = 4;

  // Topology can contain arbitrary topology information associated with the
  // endpoint.
  // Key/value pairs contained in topology must conform with the label format.
  // https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
  // Topology may include, but is not limited to the following well known keys:
  // kubernetes.io/hostname: the value indicates the hostname of the node
  // where the endpoint is located. This should match the corresponding
  // node label.
  // topology.kubernetes.io/zone: the value indicates the zone where the
  // endpoint is located. This should match the corresponding node label.
  // topology.kubernetes.io/region: the value indicates the region where the
  // endpoint is located. This should match the corresponding node label.
  // +optional
  map<string, string> topology = 5;
}

// EndpointConditions represents the current condition of an endpoint
message EndpointConditions {
  // Ready indicates if the endpoint is ready to serve traffic
  optional bool ready = 1;
}

// EndpointPort represents a Port used by an EndpointSlice
message EndpointPort {
  // The name of this port.
  // If the EndpointSlice is dervied from K8s service, this corresponds to ServicePort.Name.
  // Name must be a IANA_SVC_NAME or an empty string.
  // Default is empty string.
  // +optional
  optional string name = 1;

  // The IP protocol for this port.
  // Must be UDP, TCP, or SCTP.
  // Default is TCP.
  // +optional
  optional string protocol = 2;

  // The port number of the endpoint.
  // If this is not specified, ports are not restricted and must be
  // interpreted in the context of the specific consumer.
  // +optional
  optional int32 port = 3;
}

// EndpointSlice represents a set of endpoints that implement a service
message EndpointSlice {
  // Standard object's metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // This field specifies the list of ports associated with each endpoint in the EndpointSlice
  // Each EndpointPort must have a unique port name.
  // +optional
  // +listType=atomic
  repeated EndpointPort ports = 2;

  // This field specifies the type of targets associated with each endpoint in the EndpointSlice
  // Default is IP.
  // +optional
  optional string targetType = 3;

  // The set of endpoints backing this slice
  // +listType=atomic
  repeated Endpoint endpoints = 4;
}

// EndpointSliceList represents a list of endpoint slices
message EndpointSliceList {
  // Standard list metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of endpoint slices
  // +listType=set
  repeated EndpointSlice items = 2;
}

