/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-generated-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE. DO NOT EDIT.
var map_Endpoint = map[string]string{
	"":           "Endpoint represents a set of backends implementing a service",
	"targets":    "Required: Targets of the endpoint. Must contain at least one target. Different consumers (e.g. kube-proxy) handle different types of targets in the context of its own capabilities.",
	"conditions": "Required: the conditions of the endpoint.",
	"hostname":   "The stated hostname of this endpoint. This field may be used by consumers of endpoint to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS).",
	"targetRef":  "Reference to object providing the endpoint.",
	"topology":   "Topology can contain arbitrary topology information associated with the endpoint. Key/value pairs contained in topology must conform with the label format. https://kubernetes.io/docs/concepts/overview/working-with-objects/labels Topology may include, but is not limited to the following well known keys: kubernetes.io/hostname: the value indicates the hostname of the node where the endpoint is located. This should match the corresponding node label. topology.kubernetes.io/zone: the value indicates the zone where the endpoint is located. This should match the corresponding node label. topology.kubernetes.io/region: the value indicates the region where the endpoint is located. This should match the corresponding node label.",
}

func (Endpoint) SwaggerDoc() map[string]string {
	return map_Endpoint
}

var map_EndpointConditions = map[string]string{
	"":      "EndpointConditions represents the current condition of an endpoint",
	"ready": "Ready indicates if the endpoint is ready to serve traffic",
}

func (EndpointConditions) SwaggerDoc() map[string]string {
	return map_EndpointConditions
}

var map_EndpointPort = map[string]string{
	"":         "EndpointPort represents a Port used by an EndpointSlice",
	"name":     "The name of this port. If the EndpointSlice is dervied from K8s service, this corresponds to ServicePort.Name. Name must be a IANA_SVC_NAME or an empty string. Default is empty string.",
	"protocol": "The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.",
	"port":     "The port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.",
}

func (EndpointPort) SwaggerDoc() map[string]string {
	return map_EndpointPort
}

var map_EndpointSlice = map[string]string{
	"":           "EndpointSlice represents a set of endpoints that implement a service",
	"metadata":   "Standard object's metadata.",
	"ports":      "This field specifies the list of ports associated with each endpoint in the EndpointSlice Each EndpointPort must have a unique port name.",
	"targetType": "This field specifies the type of targets associated with each endpoint in the EndpointSlice Default is IP.",
	"endpoints":  "The set of endpoints backing this slice",
}

func (EndpointSlice) SwaggerDoc() map[string]string {
	return map_EndpointSlice
}

var map_EndpointSliceList = map[string]string{
	"":         "EndpointSliceList represents a list of endpoint slices",
	"metadata": "Standard list metadata.",
	"items":    "List of endpoint slices",
}

func (EndpointSliceList) SwaggerDoc() map[string]string {
	return map_EndpointSliceList
}

// AUTO-GENERATED FUNCTIONS END HERE
